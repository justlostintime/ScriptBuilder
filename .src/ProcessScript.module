' Gambas module file

Public DataTypes As String[] = ["Binary", "Boolean", "Byte", "Short", "Integer", "Long", "Single", "Float", "Date", "String",
    "LongDate", "Pointer", "Variant", "Function", "Class", "NULL", "Object", "Not Array", "",
    "", "", "", "", ""]

Public Styles As String[] = ["Background", "Normal", "Selection", "Alternate", "Highlight", "CurrentLine", "Added", "Removed", "Error", "Comment", "Documentation", "Keyword",
    "Function", "Operator", "Symbol", "Number", "String", "Breakpoint", "Current", "Datatype", "Preprocessor", "Escape", "Label", "Constant", "Class", "Id", "Element",
    "Property", "Pseudo", "Rule", "Important", "File", "Header", "Position", "Markup", "Attribute", "Value", "Entity", "WebMarkup", "WebComment", "WebArgument"]

Public OtherScriptTypes As String[]

Private classStack As New String[]
Private withStack As New String[]
Private procStack As New String[]

Public Sub _init()

    Try OtherScriptTypes = Split(File.load("/etc/shells"), "\n", "\"", True, False)
    If Error Then
        OtherScriptTypes = ["bash", "tcsh", "csh", "dash", "zsh", "gsh", "fish", "rbash", "sh"]
    Endif

End

Sub GetPath() As String

    Dim result As String = ""

    If classStack.count > 0 Then result &= classStack.last & ":"
    If procStack.count > 0 Then result &= procStack.last & ":"
    Return result

End

'' check if the script is some other type, or no type specified
Sub OtherScript(firstLine As String) As Boolean

    If OtherScriptTypes = Null Then _init()

    For Each s As String In OtherScriptTypes
        If Left(firstline, 2) = "#!" And If Right(firstline, -2) Like s Then Return True
    Next

    Return False

End

Public Sub _Call(ByRef Block As TextEditor) As Boolean

    With Fmain
        Dim Syms As String[]
        Dim Types As Integer[]
        Dim i As Integer
        Dim j As Integer
        Dim sLine As String

        classStack.clear()
        withStack.clear()
        procStack.clear()

        If (Block.Count = 1) And (Trim$(Block[i].text).len = 0) Then
            .OutputText.WriteTo("\r\n>>>" & ("No Program to run!"))
            Return False
        Endif

        If OtherScript(Block[0].text) Then Return False

        Dim ShaBang As Boolean = False
        For i = 0 To Block.View.Max

            If Not Block[i].text Then Continue                  ' Skip if nothing there
            sLine = Trim(Block[i].text)
            If sLine = "" Then Continue                                ' skip blank lines
            If sLine Like "'*" Then Continue                        ' Skip Comment lines
            If sLine Like "#!*" Then
                ShaBang = True
                Continue                   ' skip control headers
            Endif
            If .debuggerFlag = True Then
                Print "\nBuilder -> "; sLine
            Endif

            Syms = Highlight.Analyze(sLine)
            Types = Highlight.types

            If .debuggerFlag = True Then  ' display the parsed line and types
                Dim si As Integer = 0
                Print ("Builder ->");; ("Max Symbols") & " = "; Syms.max
                For si = 0 To syms.max
                    Dim ss As String = Trim(syms[si])
                    Print ("Builder ->"); ss & Space(If(Len(ss) < 30, 30 - Len(ss), 1)); Styles[Types[si]]; "("; Types[si]; ")"
                Next

            Endif

            If Syms.count Then
                For j As Integer = 0 To Syms.max

                    Select Case Highlight.Types[j]

                        Case Highlight.Operator
                            If j + 1 > Highlight.Types.max Then Continue
                            If Syms[j] = "." Then
                                .VarSyms.Add(GetPath() & Syms[j + 1], Syms[j + 1])
                                j += 1
                            Endif

                        Case Highlight.Keyword, Highlight.Function, Highlight.Preprocessor
                            Select Case Upper(Syms[j])

                                Case "USE"
                                    If j + 1 > Highlight.Types.max Or If j > 0 Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Then
                                        .ModuleSyms.Add(Syms[j + 1], Syms[j + 1])
                                        Inc j
                                    Endif
                                    While j < Syms.count And Syms[j + 1] = ","
                                        Inc j
                                        If Highlight.Types[j + 1] = Highlight.Symbol Then
                                            .ModuleSyms.Add(Syms[j + 1], Syms[j + 1])
                                            Inc j
                                        Endif
                                    Wend
                                    Break

                                Case "DIM"
                                    If j + 1 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Then
                                        .VarSyms.Add(GetPath() & Syms[j + 1], Syms[j + 1])
                                        Inc j
                                    Endif

                                    While j < Syms.count And Syms[j + 1] = ","
                                        Inc j
                                        If Highlight.Types[j + 1] = Highlight.Symbol Then
                                            .VarSyms.Add(GetPath() & Syms[j + 1], Syms[j + 1])
                                            Inc j
                                        Endif
                                    Wend

                                    Break

                                Case "FAST", "UNSAFE"

                                Case "PROPERTY"
                                    If j + 2 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Or Highlight.Types[j + 1] = Highlight.Keyword Then
                                        Inc j
                                        If Highlight.Types[j] = Highlight.Keyword Then Inc j
                                        .PropSyms.Add(GetPath() & Syms[j], Syms[j])
                                    Endif
                                    Break

                                Case "WITH"
                                    If j + 1 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Or If Highlight.Types[j + 1] = Highlight.DataType Then
                                        withStack.Push(Syms[j + 1])
                                        Inc j
                                    Endif

                                Case "INCLUDE", "#INCLUDE"
                                    If j + 1 > syms.max Then Continue
                                    If .DebuggerFlag = True Then Print ("Builder ->") & "Include file " & Syms[j + 1]
                                    Break

                                Case "END"
                                    If classStack.count > 0 Or withStack.count > 2 And If syms.count = 2 Then
                                        Inc j
                                        If syms[j] == "class" Then
                                            classStack.Pop()
                                        Else If syms[j] == "with" Then
                                            withStack.Pop()
                                        Endif
                                    Else
                                        If procStack.count > 0 Then
                                            procStack.Pop()
                                        Endif
                                    Endif
                                    Break

                                Case "CLASS"
                                    If j + 1 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Or If Highlight.Types[j + 1] = Highlight.DataType Then
                                        .ClassSyms.Add(Syms[j + 1], Syms[j + 1])
                                        classStack.Push(Syms[j + 1])
                                        Inc j
                                    Endif
                                    Break

                                Case "SUB", "FUNCTION", "PROCEDURE"
                                    If j + 1 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j + 1] = Highlight.Symbol Then
                                        Inc j
                                        .ProcSyms.Add(GetPath() & Syms[j], Syms[j])
                                        procStack.Push(Syms[j])
                                    Endif
                                    Break

                                Case "STATIC", "FOR"

                                Case "PUBLIC", "PRIVATE"
                                    If j + 1 > Highlight.Types.max Then Continue
                                    If Highlight.Types[j] = Highlight.Symbol Then
                                        Inc j
                                        .VarSyms.Add(GetPath() & Syms[j], Syms[j])
                                        Break
                                    Endif

                                Default
                                    Break

                            End Select

                        Case Highlight.Symbol

                            If Not .VarSyms.Exist(Syms[j]) Then

                                Select Case Upper(Syms[j])
                                    Case "INCLUDE", "#INCLUDE"
                                        If j + 1 > syms.max Then Continue
                                        If .DebuggerFlag = True Then Print ("Builder ->") & "Include file " & Syms[j + 1]
                                        Break

                                    Case Else
                                        If j + 1 > syms.max Then Continue
                                        If (Syms[j + 1] == "AS") Then
                                            .VarSyms.Add(GetPath() & Syms[j], Syms[j])
                                            Break
                                        Endif

                                        If .DebuggerFlag = True Then
                                            Print ("Builder ->") & ("Sym not found ") & Syms[j]
                                            .OutputText.WriteTo("\r\n>>> " & ("warning Symbol Undefined - origin") & " [" & GetPath() & Syms[j] & "] Line:" & Str$(i + 1) & "\n\r")
                                        Endif

                                        Break
                                        '.VarSyms.Add(GetPath() & Syms[j], Syms[j])
                                End Select
                            Else
                                Break
                            Endif

                    End Select

                Next

            Endif
        Next

        If ShaBang = False Then
            Block.Goto(0, 0)
            Block.Insert("#!/usr/bin/env gbs3\n")
        Endif

        If .DebuggerFlag = True Then
            Print ("Builder ->") & "Classes:"
            For Each Item As String In .ClassSyms
                Print ("Builder ->") & "                          " & Item
            Next

            Print ("Builder ->") & "Variables:"
            For Each Item As String In .VarSyms
                Print "Builder ->                          " & Item
            Next

            Print ("Builder ->") & "Procedures:"
            For Each Item As String In .ProcSyms
                Print "Builder ->                          " & Item
            Next

            Print ("Builder ->") & "Properties:"
            For Each Item As String In .PropSyms
                Print ("Builder ->") & "                          " & Item
            Next

        Endif

        Return True

    Catch
        Print Error.text, Error.Where
        Stop

    End With

End
